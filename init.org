#+PROPERTY: tangle "~/.emacs.d/init.el"

* My Emacs configuration
  
This is my attempt at a useful emacs configuration.
I'm a long time vim user (~15 years) and finally got my first real taste of Emacs when i heard about Spacemacs.
I used Spacemacs for about a year before returning to vim. I still think that Spacemacs is a great way for vim users (or probably everyone, it has a "holy mode" after all) to get a taste of emacs.
For me, it turned out too bloated. I'd still recommend spacemacs to every vim user on the fence about trying emacs
I like to understand how my tools work and to be able to tinker with them which - at least for me - was much easier to do with (neo)vim.
Alas, I couldn't find any tool that could replace org mode, so I started using emacs again just for org mode. 
The plan is to incrementally turn emacs into an environment that can replace my combination of tmux, vim, neomutt and other tools, so I will finally be able to switch to emacs for good. At the moment, I'm not even close...
** Disclaimer
   
*I'm an emacs beginner and thus don't really know what I'm doing. I strongly advise against using this configuration as a whole or copying parts of it blindly.*

** General stuff

#+begin_src emacs-lisp :tangle yes
  (global-linum-mode t)           ; Line numbers in all buffers
  (setq-default abbrev-mode t)    ; I want to use my abbreviations everywhere
  (menu-bar-mode -1)              ; No menu bar
  (tool-bar-mode -1)              ; No tool bar
  (scroll-bar-mode -1)            ; No scroll bar
  (setq inhibit-startup-screen t) ; No startup screen
  ;; recognize themes in ~/.emacs.d/themes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'adwaita t)
  (setq indent-tabs-mode nil)     ; always use spaces for indenting
  (column-number-mode)            ; Display column number in mode line
  (display-time)                  ; Display time in mode line
  (setq browse-url-browser-function 'browse-url-xdg-open) ; use system's default browser for urls
  (setq tramp-default-method "ssh")
  (add-to-list 'default-frame-alist '(font . "Source Code Pro 10"))
  (setq initial-scratch-message ";; Welcome to Emacs")

  ;; send mail with msmtp
  (setq sendmail-program "/usr/bin/msmtp")

  ;; Enable emacs to send desktop notifications
  (require 'notifications)


  ;; never center point when scrolling out of frame, just bring it back to view
  ;; aka "Scroll like vim would", sort of
  (setq scroll-conservatively 101)

  ;; set european/military time format
  (setq display-time-24hr-format 1)

  ;; Localize calendar
  ;; See: https://www.emacswiki.org/emacs/CalendarLocalization
  (add-hook 'calendar-load-hook
            (lambda ()
              (calendar-set-date-style 'european)))
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                 "Donnerstag" "Freitag" "Samstag"]
        calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                   "Juni" "Juli" "August" "September"
                                   "Oktober" "November" "Dezember"]
        solar-n-hemi-seasons '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang")
        holiday-general-holidays '((holiday-fixed 1 1 "Neujahr")
                                   (holiday-fixed 5 1 "Tag der Arbeit")
                                   (holiday-fixed 10 3 "Tag der Deutschen Einheit"))
        holiday-christian-holidays '((holiday-float 12 0 -4 "1. Advent" 24)
                                     (holiday-float 12 0 -3 "2. Advent" 24)
                                     (holiday-float 12 0 -2 "3. Advent" 24)
                                     (holiday-float 12 0 -1 "4. Advent" 24)
                                     (holiday-fixed 12 25 "1. Weihnachtstag")
                                     (holiday-fixed 12 26 "2. Weihnachtstag")
                                     (holiday-easter-etc -48 "Rosenmontag")
                                     (holiday-easter-etc -2 "Karfreitag")
                                     (holiday-easter-etc 0 "Ostersonntag")
                                     (holiday-easter-etc 1 "Ostermontag")
                                     (holiday-easter-etc +39 "Christi Himmelfahrt")
                                     (holiday-easter-etc +49 "Pfingstsonntag")
                                     (holiday-easter-etc +50 "Pfingstmontag")
                                     (holiday-easter-etc +60 "Fronleichnam")
                                     (holiday-fixed 11 1 "Allerheiligen")))


  ;; Basic orgmode settings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)

  ;; I want to be able to work with clients
  (server-start)
#+end_src
** Bootstrap
*** Package Sources

 #+begin_src emacs-lisp :tangle yes
   (package-initialize)
   (unless (assoc-default "melpa" package-archives)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
   (unless (assoc-default "org" package-archives)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
 #+end_src

*** Use-package
 
#+begin_src emacs-lisp :tangle yes
   ;; bootstrap use-package
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
#+end_src
** Appearance
Although I don't want to use spacemacs, I really like its appearance, so:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t)
    (setq spacemacs-theme-org-agenda-height nil)
    (setq spacemacs-theme-org-height nil))

  (use-package spaceline
    :ensure t
    :demand t
    :init
    (setq powerline-default-separator 'arrow-fade)
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme))
#+END_SRC

** Evil Mode
 I really tried to go without it, but text navigation in vanilla Emacs is crippled.


 #+begin_src emacs-lisp :tangle yes
   ;; load evil
   (use-package evil
     :ensure t ;; install the evil package if not installed
     :init
     (setq evil-want-integration nil)
     :config ;; tweak evil after loading it
     (evil-mode 1))
 #+end_src
 I guess I need vim bindings everywhere. My initial idea was to use vim bindings for text only and stick with the original bindings for everything else (Magit, Mail, etc.) but then I had a hard time switching away from my email inbox buffer. Rather than configuring every mode myself, I decided to give evil-collection a try.
 
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
 #+END_SRC

** which-key

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 0.01))
#+end_src

** Fuzzy search

Ivy and counsel are supposed to be more lightweight than helm, so I'll use those
for the time being

#+begin_src emacs-lisp :tangle yes
;; initial ivy and counsel configuration from:
;; https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "") ; don't display ivy in modeline
  :init (ivy-mode 1)        ; enable ivy globally at startup
  :bind (:map ivy-mode-map  ; bind in the ivy buffer
        ("C-'" . ivy-avy))  ; C-' to ivy-avy
  :config
  (setq ivy-use-virtual-buffers t)  ; extend searching to bookmarks and ...
  (setq ivy-height 20)              ; set height of the ivy window
  (setq ivy-count-format "(%d%d) ") ; count format, from the ivy help package
 )

(use-package counsel :ensure t
  :bind*                           ; load counsel when pressed
  (("M-x" . counsel-M-x)           ; M-x use counsel
   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
   ("C-x C-r" . counsel-recentf)   ; search recently edited files
  )
)

#+end_src

** Key bindings
[[https://github.com/noctuid/general.el][General.el]] looks like the best way to resemble something like the vim <Leader>,
so here goes:

#+begin_src emacs-lisp :tangle yes
  (use-package general :ensure t
    :config
    (general-evil-setup t)
    (setq general-default-keymaps 'evil-normal-state-map)
    (general-define-key :prefix "SPC"
                        ;; applications
                        "a" '(:ignore t :which-key "applications")
                        "ad" 'deft
                        "ar" 'deer
                        ;; buffers
                        "b" '(:ignore t :which-key "buffers")
                        "bb" 'switch-to-buffer
                        "bd" 'kill-this-buffer
                        ;; files
                        "f" '(:ignore t :which-key "file")
                        "fed" '((lambda ()(interactive)
                                  (find-file "~/.emacs.d/init.el"))
                                :which-key "open init.el")
                        "ff" 'counsel-find-file
                        "fs" 'save-buffer

                        ;; magit bindings
                        "g" '(:ignore t :which-key "git")
                        "gs" '(magit-status :which-key "git status")

                        ;; notmuch mail
                        "m" '(:ignore t :which-key "mail")
                        "mn" 'notmuch-mua-new-mail
                        "mm" 'notmuch-jump-search

                        ;; org bindings
                        "o" '(:ignore t :which-key "org-mode")
                        "oa" 'org-agenda
                        "oc" 'org-capture
                        "oi" '((lambda () (interactive)
                                 (find-file "~/gtd/inbox.org"))
                               :which-key "open inbox")
                        "og" '((lambda () (interactive)
                                 (find-file "~/gtd/gtd.org"))
                               :which-key "open gtd")
                        "ot" '((lambda () (interactive)
                                 (find-file "~/gtd/tickler.org"))
                               :which-key "open tickler")
                        "os" '((lambda () (interactive)
                                 (find-file "~/gtd/someday.org"))
                               :which-key "open someday")
                        ;; Redaktionssystem specific stuff
                        "r" '(:ignore t :which-key "Redaktionssystem")
                        "ri" '(ww-import-rds-customer :which-key "customer import")
                        ;; searching
                        "s" '(:ignore t :which-key "search")
                        "sg" 'personal/google
                        "sd" 'personal/duckduckgo
                        "sl" 'personal/lookup-word
                        ;; tmux interaction
                        "t" '(:ignore t :which-key "emamux")
                        "tr" 'emamux:send-region
                        ;; windows
                        "w" '(:ignore t :which-key "window")
                        "wh" 'evil-window-left
                        "wj" 'evil-window-down
                        "wk" 'evil-window-up
                        "wl" 'evil-window-right
                        "ws" 'evil-window-split
                        "wv" 'evil-window-vsplit
                )
    (general-define-key :keymaps 'notmuch-search-mode-map
                        "d" '(lambda () (interactive)
                               (notmuch-search-tag '("-inbox" "+deleted" "+killed")))
                        )
    )
#+end_src


** Org Mode
   
Org-Mode shows strange behaviour with evil: If I'm in a graphical frame ('emacsclient -c'), <TAB> is bound to 'org-cycle', if I open the emacsclient in a terminal ('emacsclient -t'), it is bound to 'evil-jump-forward'.
Solution: Bind #'org-cycle to "TAB" explicitly.

#+begin_src emacs-lisp :tangle no
  (use-package org
    :ensure org-plus-contrib
    :init
    (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
    :config
    (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) ; TAB is org-cycle, dammit!
    (setq org-hide-leading-stars 'hidestars)
    (setq org-return-follows-link t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)"))))
    (setq org-catch-invisible-edits "smart"
          org-startup-indented t
          org-agenda-files '("~/Dropbox/org/")
          org-directory "~/Dropbox/org"
          org-default-notes-file (concat org-directory "/inbox.org")
          org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
             "* TODO %?\n %i\n %a")
            ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
             "* %?\nEntered on %U\n %i\n %a")
            ("a" "Appointment" entry (file+headline "~/Dropbox/org/appointments.org" "Termin")
             "* %?\n%^{Zeitpunkt}T"))
          org-log-done 'time
          org-log-into-drawer t)
    (setq org-agenda-custom-commands
          '(("D" "Daily Action List"
             ((agenda "" ((org-agenda-span 1)
                          (org-agenda-sorting-strategy '((agenda time-up priority-down tag-up )))))))))
#+end_src

The above turned out to be overwhelming for the time being. Now trying something else inspired by [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this blog post]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    :init
    (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
    :config
    (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) ; TAB is org-cycle, dammit!
    (setq org-hide-leading-stars 'hidestars)
    (setq org-return-follows-link t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)"))))
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
    (setq org-catch-invisible-edits "smart"
          org-startup-indented t
          org-agenda-files '("~/Dropbox/new_org/inbox.org"
                             "~/Dropbox/new_org/gtd.org"
                             "~/Dropbox/new_org/tickler.org")
          org-directory "~/Dropbox/new_org"
          org-default-notes-file (concat org-directory "/inbox.org")
          org-capture-templates
          '(("t" "Todo [inbox]" entry
             (file+headline "~/Dropbox/new_org/inbox.org" "Tasks")
             "* TODO %i%?")
            ("T" "Tickler" entry
             (file+headline "~/Dropbox/new_org/tickler.org" "Tickler")
             "* %i%? \n %U"))
          org-refile-targets '(("~/Dropbox/new_org/gtd.org" :maxlevel . 3)
                               ("~/Dropbox/new_org/someday.org" :level . 1)
                               ("~/Dropbox/new_org/tickler.org" :maxlevel . 2))
          org-log-done 'time
          org-log-into-drawer t)
    (setq org-agenda-custom-commands
          '(("w" "Wetterwelt"
             (org-agenda-overriding-header "Wetterwelt")
             (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))

#+END_SRC

** Reading email

Notmuch is installed via the host's package manager. We need compatibility and notmuch.el comes with the notmuch installation. So just use it.

#+begin_src emacs-lisp :tangle yes
  (require 'notmuch)
  (setq message-kill-buffer-on-exit t) ; kill the message buffer after sending mail
#+end_src


** Programming
*** Code folding   
Try Origami..
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package origami
    :ensure t)
#+END_SRC
*** Version control

 Magit looks like the best thing since sliced bread for this purpose.

 #+begin_src emacs-lisp :tangle yes
 (use-package magit
   :ensure t
   :config
   (evil-add-hjkl-bindings magit-status-mode-map 'emacs))
 #+end_src
   
*** Smartparens

 Auto-pairs for parenthesis etc.

 #+begin_src emacs-lisp :tangle yes
   (use-package smartparens
     :ensure t
     :config
     (smartparens-global-mode)
     (require 'smartparens-config))
 #+end_src
   
*** Company Mode
Well, this is supposed to complete anything, right? Just a quick try here

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay             0.1
	  company-minimum-prefix-length  2
	  company-show-numbers           t
	  company-tooltip-limit          20
	  company-dabbrev-downcase       nil)
    (add-to-list 'company-backends 'company-anaconda)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+end_src

*** Syntax checking
Testing flycheck as a syntax checker.
Flycheck mode will be added as a hook for each mode it's supposed to work in as it masked ord key bindings when I activated it using (global-flycheck-mode)
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t)
#+end_src

*** Python
Use ipython for inferior python mode and use simple prompt to avoid gibberish caused by ansi-color codes.
`python-shell-prompt-block-regexp` needs to be set for multiline-statements to work in inferior-python-mode when company-mode is active. Thanks to `/u/fzmad` in [[https://www.reddit.com/r/emacs/comments/aruxah/python_shell_doesnt_work_with_multiple_lines_of/][this reddit thread]]. Completion still doesn't seem to work, though.

#+begin_src emacs-lisp :tangle yes
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --pprint" ;; no ansi color codes on prompt
        python-shell-prompt-block-regexp "\\.\\.\\.:?") ;; Ensure functioning multi-line statements
#+end_src

**** Anaconda Mode

According to the [[https://github.com/proofit404/anaconda-mode][Anaconda Mode Git repository]], Anaconda mode provides:

- context-sensitive code completion
- jump to definitions
- find references
- view documentation
- virtual environment
- eldoc mode
- all this stuff inside vagrant, docker and remote hosts

for python.

From the last point, I use remote hosts and docker. For the latter, the  [[https://github.com/emacs-pe/docker-tramp.el][Docker Tramp]] module is needed, apparently.

To use code folding, hs-minor-mode has to be activated, hence the last hook below.

#+begin_src emacs-lisp :tangle yes
  (use-package anaconda-mode
    :ensure t
    :config
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
      (add-hook 'python-mode-hook 'hs-minor-mode) ;; code folding
      (add-hook 'python-mode-hook 'flycheck-mode)) ;; syntax checking

  (use-package company-anaconda
    :ensure t)

  (use-package docker-tramp
    :ensure t)
#+end_src

**** Managing virtual environments

#+begin_src emacs-lisp :tangle yes
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.virtualenvs")
  (pyvenv-mode 1)
  (pyvenv-tracking-mode 1))
#+end_src

*** Common Lisp
I use [[http://quicklisp.org][Quicklisp]], which (as I've been told) spares some hassle setting up slime. Otoh, the slime version that came with it is buggy when used with emacs 26.1 (which I use). So I just put a newer slime version in the quicklisp slime directory and it seems to work so far.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; common lisp
  (use-package slime
    :ensure t)
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/bin/sbcl")
#+END_SRC

*** HTML
Emmet mode seems to be the way to go.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :ensure t)
#+END_SRC
*** Tmux interaction
As long as I haven't figured out how to use inferior processes I'll keep using tmux for python REPLs. Thus I need a way to send text from emacs to a specific tmux pane.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emamux
    :ensure t)
#+END_SRC
** Customization functions
*** Themes
Until recently, I wasn't aware that `load-theme` will not switch themes, but add the face properties of the newly loaded theme to the ones already loaded thus "stacking" themes.
That's not what I want, so I advice load-theme to disable all themes before loading the specified one.

What I'm doing here is [[https://stackoverflow.com/questions/22866733/emacs-disable-theme-after-loading-a-different-one-themes-conflict][probably not a good idea]], so I print out a message when disabling themes. This way, I'll have an entry in in the message buffer to remind me if I ever run into problems because of this. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun disable-all-themes ()
    "disable all active themes."
    (message "disabling all active themes")
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))
#+END_SRC
*** Utility functions
I want to be able to do google/duckduckgo searches and lookup words from emacs.
Credits go to [[https://batsov.com/articles/2011/11/19/why-emacs/][Bozhidar Batsov]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun personal/google ()
    "Googles a query or region if any."
    (interactive)
    (browse-url
     (concat
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "Google: ")))))

  (defun personal/duckduckgo ()
    "Searches DuckDuckGo with query or region if any."
    (interactive)
    (browse-url
     (concat
      "http://www.duckduckgo.com/?q="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "DuckDuckGo: ")))))

  (defun personal/lookup-word ()
    "Looks up word or region if any on dict.cc"
    (interactive)
    (browse-url
     (concat
      "http://www.dict.cc/?s="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "Look up: ")))))
#+END_SRC
