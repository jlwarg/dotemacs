#+PROPERTY: tangle "~/.emacs.d/init.el"

* My Emacs configuration
  
This is my attempt at a useful emacs configuration.
I'm a long time vim user (~15 years) and finally got my first real taste of Emacs when i heard about Spacemacs.
I used Spacemacs for about a year before returning to vim. I still think that Spacemacs is a great way for vim users (or probably everyone, it has a "holy mode" after all) to get a taste of emacs.
For me, it turned out too bloated. I'd still recommend spacemacs to every vim user on the fence about trying emacs
I like to understand how my tools work and to be able to tinker with them which - at least for me - was much easier to do with (neo)vim.

** Disclaimer
   
*I'm an emacs beginner and thus don't really know what I'm doing. I strongly advise against using this configuration as a whole or copying parts of it blindly.*

** General stuff

#+begin_src emacs-lisp :tangle yes
  (global-linum-mode t)           ; Line numbers in all buffers
  (setq-default abbrev-mode t)    ; I want to use my abbreviations everywhere
  (menu-bar-mode -1)              ; No menu bar
  (tool-bar-mode -1)              ; No tool bar
  (scroll-bar-mode -1)            ; No scroll bar
  (setq inhibit-startup-screen t) ; No startup screen
  ;; recognize themes in ~/.emacs.d/themes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'wheatgrass t)
  (setq indent-tabs-mode nil)     ; always use spaces for indenting
  (column-number-mode)            ; Display column number in mode line
  (display-time)                  ; Display time in mode line
  (setq browse-url-browser-function 'browse-url-xdg-open) ; use system's default browser for urls
  (setq tramp-default-method "ssh")
  (add-to-list 'default-frame-alist '(font . "Source Code Pro 10"))
  (setq initial-scratch-message ";; Welcome to Emacs")

  ;; send mail with msmtp
  (setq sendmail-program "/usr/bin/msmtp")


  ;; never center point when scrolling out of frame, just bring it back to view
  ;; aka "Scroll like vim would", sort of
  (setq scroll-conservatively 101)

  ;; Basic orgmode settings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
  (setq org-catch-invisible-edits "smart"
        org-startup-indented t
        org-agenda-files '("~/Dropbox/org/")
        org-directory "~/Dropbox/org"
        org-default-notes-file (concat org-directory "/inbox.org")
        org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
           "* TODO %?\n %i\n %a")
          ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")))
#+end_src

** Bootstrap
*** Package Sources

 #+begin_src emacs-lisp :tangle yes
   (package-initialize)
   (unless (assoc-default "melpa" package-archives)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
   (unless (assoc-default "org" package-archives)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
 #+end_src

*** Use-package
 
#+begin_src emacs-lisp :tangle yes
   ;; bootstrap use-package
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
#+end_src

** Evil Mode
 I really tried to go without it, but text navigation in vanilla Emacs is crippled.


 #+begin_src emacs-lisp :tangle yes
   ;; load evil
   (use-package evil
     :ensure t ;; install the evil package if not installed
     :config ;; tweak evil after loading it
     (evil-mode))
 #+end_src

** which-key

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
	  which-key-side-window-max-width 0.33
	  which-key-idle-delay 0.01))
#+end_src

** Fuzzy search

Ivy and counsel are supposed to be more lightweight than helm, so I'll use those
for the time being

#+begin_src emacs-lisp :tangle yes
;; initial ivy and counsel configuration from:
;; https://sam217pa.github.io/2016/08/30/how-to-make-your-own-spacemacs/
(use-package ivy
  :ensure t
  :diminish (ivy-mode . "") ; don't display ivy in modeline
  :init (ivy-mode 1)        ; enable ivy globally at startup
  :bind (:map ivy-mode-map  ; bind in the ivy buffer
        ("C-'" . ivy-avy))  ; C-' to ivy-avy
  :config
  (setq ivy-use-virtual-buffers t)  ; extend searching to bookmarks and ...
  (setq ivy-height 20)              ; set height of the ivy window
  (setq ivy-count-format "(%d%d) ") ; count format, from the ivy help package
 )

(use-package counsel :ensure t
  :bind*                           ; load counsel when pressed
  (("M-x" . counsel-M-x)           ; M-x use counsel
   ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
   ("C-x C-r" . counsel-recentf)   ; search recently edited files
  )
)

#+end_src

** Key bindings
[[https://github.com/noctuid/general.el][General.el]] looks like the best way to resemble something like the vim <Leader>,
so here goes:

#+begin_src emacs-lisp :tangle yes
(use-package general :ensure t
  :config
  (general-evil-setup t)
  (setq general-default-keymaps 'evil-normal-state-map)
  (general-define-key :prefix "SPC"
		      ;; applications
		      "a" '(:ignore t :which-key "applications")
		      "ad" 'deft
		      "ar" 'deer
		      ;; buffers
		      "b" '(:ignore t :which-key "buffers")
		      "bb" 'switch-to-buffer
		      "bd" 'kill-this-buffer
		      ;; files
		      "f" '(:ignore t :which-key "file")
		      "fed" '((lambda ()(interactive)
				(find-file "~/.emacs.d/init.el"))
			      :which-key "open init.el")
		      "ff" 'counsel-find-file
		      "fs" 'save-buffer

		      ;; magit bindings
		      "g" '(:ignore t :which-key "git")
		      "gs" '(magit-status :which-key "git status")

		      ;; notmuch mail
		      "m" '(:ignore t :which-key "mail")
		      "mn" 'notmuch-mua-new-mail
		      "mm" 'notmuch-jump-search

                      ;; org bindings
		      "o" '(:ignore t :which-key "org-mode")
		      "oa" 'org-agenda
		      "oc" 'org-capture
		      "oi" '((lambda () (interactive)
			       (find-file "~/gtd/inbox.org"))
			     :which-key "open inbox")
		      "og" '((lambda () (interactive)
			       (find-file "~/gtd/gtd.org"))
			     :which-key "open gtd")
		      "ot" '((lambda () (interactive)
			       (find-file "~/gtd/tickler.org"))
			     :which-key "open tickler")
		      "os" '((lambda () (interactive)
			       (find-file "~/gtd/someday.org"))
			     :which-key "open someday")
		      ;; Redaktionssystem specific stuff
		      "r" '(:ignore t :which-key "Redaktionssystem")
		      "ri" '(ww-import-rds-customer :which-key "customer import")
		      ;; windows
		      "w" '(:ignore t :which-key "window")
		      "wh" 'evil-window-left
		      "wj" 'evil-window-down
		      "wk" 'evil-window-up
		      "wl" 'evil-window-right
		      "ws" 'evil-window-split
		      "wv" 'evil-window-vsplit
              )
  (general-define-key :keymaps 'notmuch-search-mode-map
                      "d" '(lambda () (interactive)
                             (notmuch-search-tag '("-inbox" "+deleted" "+killed")))
                      )
  )
#+end_src


** Org Mode
   
Org-Mode shows strange behaviour with evil: If I'm in a graphical frame ('emacsclient -c'), <TAB> is bound to 'org-cycle', if I open the emacsclient in a terminal ('emacsclient -t'), it is bound to 'evil-jump-forward'.
Solution: Bind #'org-cycle to "TAB" explicitly.

#+begin_src emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    :init
    (visual-line-mode t)
    :config
    (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) ; TAB is org-cycle, dammit!
    (setq org-hide-leading-stars 'hidestars)
    (setq org-return-follows-link t))
#+end_src

** Reading email

Notmuch is installed via the host's package manager. We need compatibility and notmuch.el comes with the notmuch installation. So just use it.

#+begin_src emacs-lisp :tangle yes
  (require 'notmuch)
  (setq message-kill-buffer-on-exit t) ; kill the message buffer after sending mail
#+end_src


** Programming
   
*** Version control

 Magit looks like the best thing since sliced bread for this purpose.

 #+begin_src emacs-lisp :tangle yes
 (use-package magit
   :ensure t
   :config
   (evil-add-hjkl-bindings magit-status-mode-map 'emacs))
 #+end_src
   
*** Smartparens

 Auto-pairs for parenthesis etc.

 #+begin_src emacs-lisp :tangle yes
   (use-package smartparens
     :ensure t
     :config
     (smartparens-global-mode)
     (require 'smartparens-config))
 #+end_src
   
*** Company Mode
Well, this is supposed to complete anything, right? Just a quick try here

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay             0.1
	  company-minimum-prefix-length  2
	  company-show-numbers           t
	  company-tooltip-limit          20
	  company-dabbrev-downcase       nil)
    (add-to-list 'company-backends 'company-anaconda)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+end_src

*** Syntax checking
Testing flycheck as a syntax checker.
Flycheck mode will be added as a hook for each mode it's supposed to work in as it masked ord key bindings when I activated it using (global-flycheck-mode)
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t)
#+end_src

*** Python
Use ipython for inferior python mode and use simple prompt to avoid gibberish caused by ansi-color codes

#+begin_src emacs-lisp :tangle yes
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --pprint") ;; no ansi color codes on prompt
#+end_src

**** Anaconda Mode

According to the [[https://github.com/proofit404/anaconda-mode][Anaconda Mode Git repository]], Anaconda mode provides:

- context-sensitive code completion
- jump to definitions
- find references
- view documentation
- virtual environment
- eldoc mode
- all this stuff inside vagrant, docker and remote hosts

for python.

From the last point, I use remote hosts and docker. For the latter, the  [[https://github.com/emacs-pe/docker-tramp.el][Docker Tramp]] module is needed, apparently.

To use code folding, hs-minor-mode has to be activated, hence the last hook below.

#+begin_src emacs-lisp :tangle yes
  (use-package anaconda-mode
    :ensure t
    :config
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
      (add-hook 'python-mode-hook 'hs-minor-mode) ;; code folding
      (add-hook 'python-mode-hook 'flycheck-mode)) ;; syntax checking

  (use-package company-anaconda
    :ensure t)
#+end_src

**** Managing virtual environments

#+begin_src emacs-lisp :tangle yes
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.virtualenvs")
  (pyvenv-mode 1)
  (pyvenv-tracking-mode 1))
#+end_src

*** Common Lisp
I use [[http://quicklisp.org][Quicklisp]], which (as I've been told) spares some hassle setting up slime. Otoh, the slime version that came with it is buggy when used with emacs 26.1 (which I use). So I just put a newer slime version in the quicklisp slime directory and it seems to work so far.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; common lisp
  (use-package slime
    :ensure t)
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/bin/sbcl")
#+END_SRC
