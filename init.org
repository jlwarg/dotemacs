#+TITLE: Emacs Configuration File
#+AUTHOR: Jochen Luig
#+EMAIL: jochen.luig@gmail.com
#+PROPERTY: tangle "~/.emacs.d/init.el"

* My Emacs configuration
  
This is my attempt at a useful emacs configuration.  I'm a long time vim user
(~15 years) and finally got my first real taste of Emacs when i heard about
Spacemacs.  I used Spacemacs for about a year before returning to vim. I still
think that Spacemacs is a great way for vim users (or probably everyone, it has
a "holy mode" after all) to get a taste of emacs.  For me, it turned out too
bloated. I'd still recommend spacemacs to every vim user on the fence about
trying emacs.  I like to understand how my tools work and to be able to tinker
with them which - at least for me - was much easier to do with (neo)vim.  Alas,
I couldn't find any tool that could replace org mode, so I started using emacs
again just for org mode.  The plan is to incrementally turn emacs into an
environment that can replace my combination of tmux, vim, neomutt and other
tools, so I will finally be able to switch to emacs for good. At the moment, I'm
not even close...
** Disclaimer
   
*I'm an emacs beginner and thus don't really know what I'm doing. I strongly
advise against using this configuration as a whole or copying parts of it
blindly.*

** General stuff

#+begin_src emacs-lisp :tangle yes
  (global-linum-mode t)           ; Line numbers in all buffers
  (setq-default abbrev-mode t)    ; I want to use my abbreviations everywhere
  (menu-bar-mode -1)              ; No menu bar
  (tool-bar-mode -1)              ; No tool bar
  (scroll-bar-mode -1)            ; No scroll bar
  (setq inhibit-startup-screen t) ; No startup screen
  ;; recognize themes in ~/.emacs.d/themes
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'adwaita t)
  (setq indent-tabs-mode nil)     ; always use spaces for indenting
  (column-number-mode)            ; Display column number in mode line
  (display-time)                  ; Display time in mode line
  (setq browse-url-browser-function 'browse-url-xdg-open) ; use system's default browser for urls
  (setq tramp-default-method "ssh")
  (add-to-list 'default-frame-alist '(font . "Source Code Pro 10"))
  (setq initial-scratch-message ";; Welcome to Emacs")

  ;; send mail with msmtp
  (setq sendmail-program "/usr/bin/msmtp")

  ;; Enable emacs to send desktop notifications
  (require 'notifications)


  ;; never center point when scrolling out of frame, just bring it back to view
  ;; aka "Scroll like vim would", sort of
  (setq scroll-conservatively 101)

  ;; set european/military time format
  (setq display-time-24hr-format 1)

  ;; Localize calendar
  ;; See: https://www.emacswiki.org/emacs/CalendarLocalization
  (add-hook 'calendar-load-hook
            (lambda ()
              (calendar-set-date-style 'european)))
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                 "Donnerstag" "Freitag" "Samstag"]
        calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                   "Juni" "Juli" "August" "September"
                                   "Oktober" "November" "Dezember"]
        solar-n-hemi-seasons '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang")
        holiday-general-holidays '((holiday-fixed 1 1 "Neujahr")
                                   (holiday-fixed 5 1 "Tag der Arbeit")
                                   (holiday-fixed 10 3 "Tag der Deutschen Einheit"))
        holiday-christian-holidays '((holiday-float 12 0 -4 "1. Advent" 24)
                                     (holiday-float 12 0 -3 "2. Advent" 24)
                                     (holiday-float 12 0 -2 "3. Advent" 24)
                                     (holiday-float 12 0 -1 "4. Advent" 24)
                                     (holiday-fixed 12 25 "1. Weihnachtstag")
                                     (holiday-fixed 12 26 "2. Weihnachtstag")
                                     (holiday-easter-etc -48 "Rosenmontag")
                                     (holiday-easter-etc -2 "Karfreitag")
                                     (holiday-easter-etc 0 "Ostersonntag")
                                     (holiday-easter-etc 1 "Ostermontag")
                                     (holiday-easter-etc +39 "Christi Himmelfahrt")
                                     (holiday-easter-etc +49 "Pfingstsonntag")
                                     (holiday-easter-etc +50 "Pfingstmontag")
                                     (holiday-easter-etc +60 "Fronleichnam")
                                     (holiday-fixed 11 1 "Allerheiligen")))


  ;; Basic orgmode settings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)

  ;; I want to be able to work with clients
  (when (not (daemonp))
    (server-start))
#+end_src
** Bootstrap
*** Package Sources

 #+begin_src emacs-lisp :tangle yes
   (package-initialize)
   (unless (assoc-default "melpa" package-archives)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
   (unless (assoc-default "org" package-archives)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))
 #+end_src

*** Use-package
 
#+begin_src emacs-lisp :tangle yes
   ;; bootstrap use-package
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (require 'use-package)
#+end_src
** Appearance
Although I don't want to use spacemacs, I really like its appearance, so:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t)
    (setq spacemacs-theme-org-agenda-height nil)
    (setq spacemacs-theme-org-height nil))

  (use-package spaceline
    :ensure t
    :demand t
    :init
    (setq powerline-default-separator 'arrow-fade)
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme))
#+END_SRC

** Evil Mode
 I really tried to go without it, but text navigation in vanilla Emacs is crippled.


 #+begin_src emacs-lisp :tangle yes
   ;; load evil
   (use-package evil
     :ensure t ;; install the evil package if not installed
     :init
     (setq evil-want-integration nil)
     (setq evil-want-keybinding nil)
     :config ;; tweak evil after loading it
     (evil-mode 1))
 #+end_src
 I guess I need vim bindings everywhere. My initial idea was to use vim bindings for text only and stick with the original bindings for everything else (Magit, Mail, etc.) but then I had a hard time switching away from my email inbox buffer. Rather than configuring every mode myself, I decided to give evil-collection a try.
 
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
 #+END_SRC

** which-key

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 0.01))
#+end_src

** Helm
I'm finally ready to try out helm after experiencing the limits of ivy and
counsel when searching for refile targets in org-mode. So here we go:

#+begin_src emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :bind
    (("M-x" . helm-M-x)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1))

#+end_src
** Key bindings
[[https://github.com/noctuid/general.el][General.el]] looks like the best way to resemble something like the vim <Leader>,
so here goes:

#+begin_src emacs-lisp :tangle yes
  (use-package general :ensure t
    :config
    (general-evil-setup t)
    (setq general-default-keymaps 'evil-normal-state-map)
    (general-define-key
     :keymaps '(normal visual)
     :prefix "SPC"
                        ;; applications
                        "a" '(:ignore t :which-key "applications")
                        "ad" 'deft
                        "ar" 'deer
                        ;; buffers
                        "b" '(:ignore t :which-key "buffers")
                        "bb" 'switch-to-buffer
                        "bd" 'kill-this-buffer
                        ;; code commenting
                        "c" '(:ignore t :which-key "commenting")
                        "ci" 'evilnc-comment-or-uncomment-lines
                        "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
                        "cc" 'evilnc-copy-and-comment-lines
                        "cp" 'evilnc-comment-or-uncomment-paragraphs
                        "cr" 'comment-or-uncomment-region
                        ;; files
                        "f" '(:ignore t :which-key "file")
                        "fed" '((lambda ()(interactive)
                                  (find-file "~/.emacs.d/init.el"))
                                :which-key "open init.el")
                        "ff" 'helm-find-files
                        "fs" 'save-buffer

                        ;; magit bindings
                        "g" '(:ignore t :which-key "git")
                        "gs" '(magit-status :which-key "git status")

                        ;; notmuch mail
                        "m" '(:ignore t :which-key "mail")
                        "mn" 'notmuch-mua-new-mail
                        "mm" 'notmuch-jump-search

                        ;; org bindings
                        "o" '(:ignore t :which-key "org-mode")
                        "oa" 'org-agenda
                        "oc" 'org-capture
                        "o," 'org-insert-structure-template
                        "of" '(:ignore t :which-key "org files")
                        "ofi" '((lambda () (interactive)
                                 (find-file "~/gtd/inbox.org"))
                               :which-key "open inbox")
                        "ofg" '((lambda () (interactive)
                                 (find-file "~/gtd/gtd.org"))
                               :which-key "open gtd")
                        "oft" '((lambda () (interactive)
                                 (find-file "~/gtd/tickler.org"))
                               :which-key "open tickler")
                        "ofs" '((lambda () (interactive)
                                 (find-file "~/gtd/someday.org"))
                               :which-key "open someday")
                        ;; Projectile
                        "p" '(projectile-command-map :which-key "Projectile")
                        ;; Redaktionssystem specific stuff
                        "r" '(:ignore t :which-key "Redaktionssystem")
                        "ri" '(ww-import-rds-customer :which-key "customer import")
                        ;; searching
                        "s" '(:ignore t :which-key "search")
                        "sg" 'personal/google
                        "sd" 'personal/duckduckgo
                        "sl" 'personal/lookup-word
                        ;; tmux interaction
                        "t" '(:ignore t :which-key "emamux")
                        "tr" 'emamux:send-region
                        ;; windows
                        "w" '(:ignore t :which-key "window")
                        "wh" 'evil-window-left
                        "wj" 'evil-window-down
                        "wk" 'evil-window-up
                        "wl" 'evil-window-right
                        "ws" 'evil-window-split
                        "wv" 'evil-window-vsplit
                )
    (general-define-key :keymaps 'notmuch-search-mode-map
                        "d" '(lambda () (interactive)
                               (notmuch-search-tag '("-inbox" "+deleted" "+killed")))
                        )
    )
#+end_src

** Org Mode
   
Org-Mode shows strange behaviour with evil: If I'm in a graphical frame ('emacsclient -c'), <TAB> is bound to 'org-cycle', if I open the emacsclient in a terminal ('emacsclient -t'), it is bound to 'evil-jump-forward'.
Solution: Bind #'org-cycle to "TAB" explicitly.
Current org configuration is inspired by [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][this blog post]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure org-plus-contrib
    :init
    (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
    (add-hook 'org-mode-hook '(lambda () (progn
                                           (set-fill-column 80)
                                           (auto-fill-mode 1))))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :config
    (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle) ; TAB is org-cycle, dammit!
    (setq org-hide-leading-stars 'hidestars)
    (setq org-return-follows-link t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d:w::!)" "CANCELLED(c@)")))
    (org-babel-do-load-languages 'org-babel-load-languages '((python . t)
                                                             (shell . t)
                                                             (sql . t)
                                                             (js . t)
                                                             (dot .t))))

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
    (setq org-catch-invisible-edits "smart"
          org-startup-indented t
          org-agenda-files '("~/Dropbox/new_org/"
                             "~/org/")
          org-directory "~/Dropbox/new_org"
          org-default-notes-file (concat org-directory "/inbox.org")
          org-capture-templates
          '(("i" "Inbox" entry
             (file "~/Dropbox/new_org/inbox.org")
             "* %i%?")
            ("j" "Journal Entry" entry
             (file+olp+datetree "~/Dropbox/new_org/journal.org")
             "* %i%?"))
          org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
          org-log-done 'time
          org-log-into-drawer t)
    (setq org-agenda-custom-commands
          '(("w" "Wetterwelt"
             (org-agenda-overriding-header "Wetterwelt")
             (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))
  ;; make org files look nicer
  (use-package org-bullets
    :ensure t)
#+END_SRC

*** Capture from everywhere
org-capture is one of the most importat features of org mode and the reason why I want to switch to emacs completely in the long run. To be able to invoke org-capture from outside of emacs, the following code is used. Found it in [[https://www.reddit.com/r/emacs/comments/6g6okf/workflow_for_using_orgmode/][this reddit thread]].
#+begin_src emacs-lisp :tangle yes
  (defun my/call-org-capture-in-new-window ()
    (org-capture)
    (delete-other-windows)
    (delete-other-windows)
    (setq-local kill-buffer-hook (lambda () (delete-frame))))
#+end_src

Now bind a key on Window manager to the following shell script:

#+begin_src shell :tangle no
  #!/bin/sh
  currentWindow=$(xprop -id $(xprop -root | awk '/_NET_ACTIVE_WINDOW\(WINDOW\)/{print $NF}') | awk '/WM_CLASS\(STRING\)/{print $NF}')

  if [[ $currentWindow == '"Emacs"' ]]; then
      emacsclient --eval "(call-interactively #'org-capture)"
  else
      emacsclient -c --eval '(my/call-org-capture-in-new-window)'
  fi
#+end_src
This will do the right thing whether you're in emacs or not at the time.

** Reading email

Notmuch is installed via the host's package manager. We need compatibility and notmuch.el comes with the notmuch installation. So just use it.

#+begin_src emacs-lisp :tangle yes
  (require 'notmuch)
  (setq message-kill-buffer-on-exit t) ; kill the message buffer after sending mail
#+end_src

** Snippets
I want to get my feet wet with snippets, inspired by howardism.org
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (define-key yas-minor-mode-map (kbd "<tab>") nil) ;; <tab> is too important e.g. in orgmode
    (define-key yas-minor-mode-map (kbd "TAB") nil)   ;; thus yields unexpected behaviour
    (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand))

  (use-package yasnippet-snippets
    :ensure t) ;; A set of snippets
#+end_src
** Programming
*** Code folding   
Try Origami..
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package origami
    :ensure t)
#+END_SRC
*** Version control

 Magit looks like the best thing since sliced bread for this purpose.

 #+begin_src emacs-lisp :tangle yes
 (use-package magit
   :ensure t
   :config
   (evil-add-hjkl-bindings magit-status-mode-map 'emacs))
 #+end_src
   
*** Smartparens

 Auto-pairs for parenthesis etc.

 #+begin_src emacs-lisp :tangle yes
   (use-package smartparens
     :ensure t
     :config
     (smartparens-global-mode)
     (require 'smartparens-config))
 #+end_src
   
*** Company Mode
Well, this is supposed to complete anything, right? Just a quick try here

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay             0.1
          company-minimum-prefix-length  2
          company-show-numbers           t
          company-tooltip-limit          20
          company-dabbrev-downcase       nil)
    (add-to-list 'company-backends 'company-anaconda)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "<tab>") nil))
#+end_src

*** Syntax checking
Testing flycheck as a syntax checker.
Flycheck mode will be added as a hook for each mode it's supposed to work in as it masked ord key bindings when I activated it using (global-flycheck-mode)
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t)
#+end_src

*** Commenting
I'm used to [[https://github.com/scrooloose/nerdcommenter][NERD Commenter]] in vim, so I'll need a replacement. [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] seems to be exactly what I need. See above (C-s) for keybindings.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-nerd-commenter
    :ensure t)
#+END_SRC
*** Project management
Emacs has a habit of changing `pwd` according to the path of the current file in the buffer. That's ok and probably even better than in vim which just stays in the directory you opened it in unless you explicitly change it. OTOH, this way you just open an instance of vim in the root directory of each project you want to work on (e.g. in a tmux session) and you'r all set. Emacs' philosophy is different here, so some basic project management functions seem to be called for.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC
*** Python
Use ipython for inferior python mode and use simple prompt to avoid gibberish caused by ansi-color codes.
`python-shell-prompt-block-regexp` needs to be set for multiline-statements to work in inferior-python-mode when company-mode is active. Thanks to `/u/fzmad` in [[https://www.reddit.com/r/emacs/comments/aruxah/python_shell_doesnt_work_with_multiple_lines_of/][this reddit thread]]. Completion still doesn't seem to work, though.

#+begin_src emacs-lisp :tangle yes
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --pprint" ;; no ansi color codes on prompt
        python-shell-prompt-block-regexp "\\.\\.\\.:?") ;; Ensure functioning multi-line statements
#+end_src

**** Anaconda Mode

According to the [[https://github.com/proofit404/anaconda-mode][Anaconda Mode Git repository]], Anaconda mode provides:

- context-sensitive code completion
- jump to definitions
- find references
- view documentation
- virtual environment
- eldoc mode
- all this stuff inside vagrant, docker and remote hosts

for python.

From the last point, I use remote hosts and docker. For the latter, the  [[https://github.com/emacs-pe/docker-tramp.el][Docker Tramp]] module is needed, apparently.

To use code folding, hs-minor-mode has to be activated, hence the last hook below.

#+begin_src emacs-lisp :tangle yes
  (use-package anaconda-mode
    :ensure t
    :config
      (add-hook 'python-mode-hook 'anaconda-mode)
      (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
      (add-hook 'python-mode-hook 'hs-minor-mode) ;; code folding
      (add-hook 'python-mode-hook 'flycheck-mode)) ;; syntax checking

  (use-package company-anaconda
    :ensure t)

  (use-package docker-tramp
    :ensure t)
#+end_src

**** Managing virtual environments

#+begin_src emacs-lisp :tangle yes
(use-package pyvenv
  :ensure t
  :init
  (setenv "WORKON_HOME" "~/.virtualenvs")
  (pyvenv-mode 1)
  (pyvenv-tracking-mode 1))
#+end_src

*** Javascript
For a start, just use the stuff found [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][here]] (and use use-package)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    ;; Better imenu (whatever that means)
    (add-hook 'js-mode-hook #'js2-imenu-extras-mode))
#+END_SRC
Refactoring stuff recommended by my source of inspiration (see above)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-refactor
    :ensure t
    :init
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill))

  (use-package xref-js2
    :ensure t
    :init
    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil)
    (add-hook 'js-mode-hook (lambda ()
                              (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
#+END_SRC
The following is for auto-completion and REPL. Requires installation of `tern`:
#+BEGIN_SRC shell
  $ sudo npm install -g tern
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-tern
    :ensure t
    :init
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda ()
                               (tern-mode)
                               (company-mode))) ;; is company mode global?
    :config
    ;; Disable completion keybindings, as we use xref-js2 instead
    (define-key tern-mode-keymap (kbd "M-.") nil)
    (define-key tern-mode-keymap (kbd "M-,") nil))

#+END_SRC
*** Common Lisp
I use [[http://quicklisp.org][Quicklisp]], which (as I've been told) spares some hassle setting up slime. Otoh, the slime version that came with it is buggy when used with emacs 26.1 (which I use). So I just put a newer slime version in the quicklisp slime directory and it seems to work so far.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; common lisp
  (use-package slime
    :ensure t)
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/bin/sbcl")
#+END_SRC

*** HTML
Emmet mode seems to be the way to go.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :ensure t)
#+END_SRC
*** GraphQL
I plan to write some notes about my learning process for GraphQL in orgmode, so I need this for inline code
#+begin_src emacs-lisp :tangle yes
  (use-package graphql-mode
    :ensure t)
#+end_src
which leads to...
*** JSON
GraphQL APIs respond with json, so...
#+begin_src emacs-lisp :tangle yes
  (use-package json-mode
    :ensure t)
#+end_src
*** Tmux interaction
As long as I haven't figured out how to use inferior processes I'll keep using tmux for python REPLs. Thus I need a way to send text from emacs to a specific tmux pane.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emamux
    :ensure t)
#+END_SRC
** Customization functions
*** Themes
Until recently, I wasn't aware that `load-theme` will not switch themes, but add the face properties of the newly loaded theme to the ones already loaded thus "stacking" themes.
That's not what I want, so I advice load-theme to disable all themes before loading the specified one.

What I'm doing here is [[https://stackoverflow.com/questions/22866733/emacs-disable-theme-after-loading-a-different-one-themes-conflict][probably not a good idea]], so I print out a message when disabling themes. This way, I'll have an entry in in the message buffer to remind me if I ever run into problems because of this. 

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun disable-all-themes ()
    "disable all active themes."
    (message "disabling all active themes")
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))
#+END_SRC
*** Utility functions
I want to be able to do google/duckduckgo searches and lookup words from emacs.
Credits go to [[https://batsov.com/articles/2011/11/19/why-emacs/][Bozhidar Batsov]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun personal/google ()
    "Googles a query or region if any."
    (interactive)
    (browse-url
     (concat
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "Google: ")))))

  (defun personal/duckduckgo ()
    "Searches DuckDuckGo with query or region if any."
    (interactive)
    (browse-url
     (concat
      "http://www.duckduckgo.com/?q="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "DuckDuckGo: ")))))

  (defun personal/lookup-word ()
    "Looks up word or region if any on dict.cc"
    (interactive)
    (browse-url
     (concat
      "http://www.dict.cc/?s="
      (if mark-active
          (buffer-substring (region-beginning) (region-end))
        (read-string "Look up: ")))))
#+END_SRC

The following ones are for time management in orgmode. I maintain an org-table
in which I put my arrival and leave time as well as breaks for each workday and
have it calculate my daily work time.

#+BEGIN_SRC emacs-lisp :tangle yes
   (defun jlwarg/total-minutes (time-string)
     "Return minutes in a given time string of the form HH:MM"
     (if (string= time-string "")
         0
       (-let [(hours minutes) (split-string time-string ":")]
         (+ (* 60 (string-to-number hours)) (string-to-number minutes)))))

   (defun jlwarg/day-work-time (come go break home)
     "calculate a day's work time"
     (format "%0.2f"
             (/
              (-
               (+ (- (jlwarg/total-minutes go) (jlwarg/total-minutes come))
                      (* (string-to-number home) 60))
                   (string-to-number break))

              60.0)))

   (defun jlwarg/weekend-p (timestamp)
     "Determine if an org timestamp is on a weekend"
     (or (string-match (regexp-quote "Sat") timestamp)
         (string-match (regexp-quote "Sun") timestamp)))

  (defun jlwarg/workdays (timestamps markers)
    "calculate workdays"
    (let ((both (-zip timestamps markers)))
      (length (seq-filter '(lambda (item)
                             (and
                              (not (jlwarg/weekend-p (car item)))
                              (string= "" (cdr item)))) both))))

  (defun jlwarg/workdays-til-today (timestamps markers)
    "count workdays of current month until today"
    (let ((current-day (string-to-number (format-time-string "%d"))))
      (jlwarg/workdays (seq-take timestamps current-day)
                       (seq-take markers current-day))))
#+END_SRC
*** Dired
Some enhancements for dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jlwarg/dired-open-file ()
    "In dired, open the
   file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
      (call-process "xdg-open" nil 0 nil file)))

  (define-key dired-mode-map (kbd "C-c o") 'jlwarg/dired-open-file)
#+END_SRC
*** Eshell
Inspired by [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][this article]] I think I should try using =eshell= to get closer to my
goal of replacing my =zsh=, =tmux= and =vim= workflow. Most of this is blatantly
stolen from [[http://www.howardism.org/][Howard Abrams]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the current buffer's
   file. The eshell is renamed to match that directory to make multiple eshell
  windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)
#+END_SRC

Functions with the prefix "eshell/" are directly available in eshell. The
following one will exit eshell and close the window.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+END_SRC
*** Auto Insert
For some files, I want to have some boilerplate inserted on creation, e.g. org
files should have Title, Author and email headers.
Most of this is stolen from [[http://www.howardism.org/Technical/Emacs/templates-tutorial.html][Howard Abrams]].

#+begin_src emacs-lisp :tangle yes
  (defun jl/autoinsert-yas-expand()
    "Replace text in yasnippet template"
    (yas-expand-snippet (buffer-string) (point-min)(point-max)))

  (use-package autoinsert
    :init
    ;; Don't want to be prompted before insertion
    (setq auto-insert-query nil)
    (setq auto-insert-directory (locate-user-emacs-file "templates"))
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode 1)
    :config
    (setq auto-insert-alist '(("\\.org" . [ "default-org.org" jl/autoinsert-yas-expand ]))))
#+end_src
